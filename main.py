# from tkinter import Tk, Button
# from PIL import ImageTk, Image
#
#
# class MyButton(Button):
#     def __init__(self, pict, command):
#         self.image = Image.open(pict)
#         self.image = self.image.resize((100, 100))
#         self.pict = ImageTk.PhotoImage(self.image)
#         super().__init__(image=self.pict, command=command)
#
# root = Tk()
# root.geometry('800x600')
# root.title('–ö—Ä–∞—Å–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞')
# image = 'image.jpg'
# # pict = ImageTk.PhotoImage(file=image)
# # Button(root, image=pict, command=lambda: print('click')).pack()
# MyButton('image.jpg', command=lambda: print('click')).pack()
# root.mainloop()
import asyncio
import os
# https://quotes.toscrape.com/
# –ü–∞—Ä—Å–∏–Ω–≥

#
# from bs4 import BeautifulSoup
# import lxml
# import requests
#
#
# url = 'https://quotes.toscrape.com/'
#
# response = requests.get(url)
# soup = BeautifulSoup(response.text, 'lxml')
# quotes = soup.find_all('span', class_='text')
# author = soup.find_all('small', class_='author')
# tags = soup.find_all('div', class_='tags')
#
# length = len(quotes)
#
# for index in range(length):
#     print(quotes[index].text)
#     print(f'\t\t\{author[index].text}')
#     t = tags[index].find_all('a', class_='tag')
#     for item in t:
#         print(f'\t\t\t#{item.text}')

# for q in quotes:
#     print(q.text)

# print(quotes)
# https://ngrok.com/

# import os
# from flask import Flask
#
#
# app = Flask(__name__)
#
# @app.route('/')
# def index():
#     return 'Flask –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å'
#
# if __name__=='__main__':
#     port = int(os.environ.get('PORT', 5000))
#     app.run(host='0.0.0.0', port=port)

#
# from multiprocessing import Process
#
#
# def print_func(continent='Asia'):
#     print(f'–≠—Ç–æ -{continent}.')
#
# if __name__ == '__main__':
#     names = ['America', 'Europe', 'Africa']
#     procs = []
#     proc = Process(target=print_func)
#     procs.append(proc)
#     proc.start()
#
#     for name in names:
#         proc = Process(target=print_func, args=(name,))
#         procs.append(proc)
#         proc.start()
#
#     for proc in procs:
#         proc.join()
#
#
# import threading
#
#
# def print_cube(num):
#     """
#     –í—ã—á–∏—Å–ª—è–µ—Ç –∫—É–± –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ num
#     """
#     print(f'–ö—É–± {num} -> {num * num * num}')
#
#
# def print_squre(num):
#     """
#     –í—ã—á–∏—Å–ª—è–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ num
#     """
#     print(f'–ö–≤–∞–¥—Ä–∞—Ç {num} -> {num ** 2}')
#
# if  __name__ == '__main__':
#     # —Å–æ–∑–¥–∞–µ–º –¥–≤–∞ –ø–æ—Ç–æ–∫–∞
#     thread1 = threading.Thread(target=print_squre, args=(10,))
#     thread2 = threading.Thread(target=print_cube, args=(10,))
#
#     thread1.start()  # –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
#     thread2.start()  # –∑–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
#
#     thread1.join()  # –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫–∞ –ø–æ—Ç–æ–∫ 1 –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
#     thread2.join()  # –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫–∞ –ø–æ—Ç–æ–∫ 2 –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
#
#     print('–ü—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã')


# def print_name(prefix):
#     print(f'–ò—â–µ–º –ø—Ä–µ—Ñ–∏–∫—Å {prefix}')
#     try:
#         while True:
#             name = (yield)
#             if prefix in name:
#                 print(name)
#     except GeneratorExit:
#         print('–ö–æ—Ä—É—Ç–∏–Ω–∞ (coroutine) –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
#
# corou = print_name('–£–≤–∞–∂–∞–µ–º—ã–π')
# corou.__next__()
# corou.send('—Ç–æ–≤–∞—Ä–∏—â')
# corou.send('–£–≤–∞–∂–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä–∏—â')


# asyncio - –º–æ–¥—É–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫—Ç–æ—Ä—ã–π –±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ Python
#
# import signal
# import sys
# import json
# import asyncio
# import aiohttp
#
# loop = asyncio.get_event_loop()
# client = aiohttp.ClientSession(loop=loop)
#
# async def get_json(client, url):
#     async with client.get(url) as response:
#         assert response.status == 200
#         return await response.read()
#         # except_AssertionError:
#
# async def get_reddit_top(subreddit, client):
#     url = 'https://www.reddit.com/r/' + subreddit + '/top.json?sort=top&t=day&limit=5'
#     print(url)
#     data1 = await get_json(client, url)
#     j = json.loads(data1.decode('utf-8'))
#     for i in j['data']['children']:
#         score = i['data']['score']
#         title = i['data']['title']
#         link = i['data']['url']
#         print(str(score) + ': ' + title + ' (' + link + ')')
#     print('–ì–æ—Ç–æ–≤–æ:', subreddit + '\n')
#
# def signal_handler(signal, frame):
#     loop.stop()
#     client.close()
#     sys.exit(0)
#
# signal.signal(signal.SIGINT, signal_handler)
#
# # asyncio.ensure_future(get_reddit_top('python', client))
# asyncio.ensure_future(get_reddit_top('programming', client))
# asyncio.ensure_future(get_reddit_top('compsci', client))
# loop.run_forever()
#
# from lib import count_word_at_url
# from redis import Redis
# from rq import Queue
#
#
#
# q = Queue(connection=Redis())
# job = q.enqueue(count_word_at_url, 'https://quotes.toscrape.com/')

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
#
# import os
# import time
# from datetime import datetime
# import asyncio
#
# import config
#
#
# async def dish(num, prepare, wait):
#
#     """
#     num: –Ω–æ–º–µ—Ä –±–ª—é–¥–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É
#     prepare: –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
#     wait: –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
#     """
#
#     print(f'{datetime.now().strftime("%H:%S")} - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –±–ª—é–¥–∞ {num} - {prepare} –º–∏–Ω.')
#     time.sleep(prepare)
#     print(f'–ù–∞—á–∞–ª–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞ {num} - {datetime.now().strftime("%H:%S")}. –û–∂–∏–¥–∞–Ω–∏–µ –±–ª—é–¥–∞ {num} {wait} –º–∏–Ω.')
#     await asyncio.sleep(wait)
#     print(f'–í {datetime.now().strftime("%H:%S")}. –±–ª—é–¥–æ {num} –≥–æ—Ç–æ–≤–æ.')
#
# async def main():
#     tasks = [
#         asyncio.create_task(dish(1, 2, 3)),
#         asyncio.create_task(dish(2, 5, 10)),
#         asyncio.create_task(dish(3, 3, 5))
#     ]
#     await asyncio.gather(*tasks)
#
# if __name__ == '__main__':
#     t0 = time.time()  # –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
#     if os.name == 'nt':
#         asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
#     asyncio.run(main()) # –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
#     delta = int(time.time() - t0)  # –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
#     print(f'–í {datetime.now().strftime("%H:%S")} –º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏')
#     print(f'–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ - {delta}')

#
# import logging
# import telebot
# import config
# from telebot import types  # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–æ–≤


# # /start
#
# # –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
# bot = telebot.TeleBot(config.bot_token)
#
#
# @bot.message_handler(commands=['start'])
# def start(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
#     btn2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
#     markup.add(btn1, btn2)
#     bot.send_message(message.chat.id,
#                      text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ç–≤–æ–µ–π —Å—Ç–∞—Ç—å–∏ –¥–ª—è habr.com".format(
#                          message.from_user), reply_markup=markup)
#
#
# @bot.message_handler(content_types=['text'])
# def func(message):
#     if (message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"):
#         bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ–µ—Ç.. –°–ø–∞—Å–∏–±–æ —á—Ç–æ —á–∏—Ç–∞–µ—à—å —Å—Ç–∞—Ç—å—é!)")
#     elif (message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         btn1 = types.KeyboardButton("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
#         btn2 = types.KeyboardButton("–ß—Ç–æ —è –º–æ–≥—É?")
#         back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
#         markup.add(btn1, btn2, back)
#         bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)
#     elif (message.text == "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"):
#         bot.send_message(message.chat.id, "–£ –º–µ–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏..")
#     elif message.text == "–ß—Ç–æ —è –º–æ–≥—É?":
#         bot.send_message(message.chat.id, text="–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å —á–∏—Ç–∞—Ç–µ–ª—è–º–∏")
#     elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
#         button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
#         markup.add(button1, button2)
#         bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
#     else:
#         bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª..")

#
# name = ''
# surname = ''
# age = 0
#
#
#
#
# bot = telebot.TeleBot(config.bot_token)
#
#
# @bot.message_handler(content_types=['text'])
# def start(message):
#     if message.text == '/start':
#         bot.send_message(message.from_user.id,
#                          "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
#         bot.register_next_step_handler(message, get_name)
#     else:
#         bot.send_message(message.from_user.id,
#                          '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –Ω–∞–ø–∏—à–∏—Ç–µ /start')
#
#
# def get_name(message):
#     global name
#     name = message.text
#     bot.send_message(message.from_user.id,
#                      '–ö–∞–∫ —Ç–≤–æ—è —Ñ–∞–º–∏–ª–∏—è –∏–º—è?')
#     bot.register_next_step_handler(message, get_surname)
#
#
# def get_surname(message):
#     global surname
#     surname = message.text
#     bot.send_message(message.from_user.id,
#                      '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
#     bot.register_next_step_handler(message, get_age)
#
#
# def get_age(message):
#     global age
#     while age == 0:
#         try:
#             age = int(message.text)
#         except ValueError:
#             bot.send_message(message.from_user.id,
#                      '–í–≤–æ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã')
#             age = 1
#             break
#     quastion = f'–¢–µ–±–µ {age} –ª–µ—Ç , –∏ —Ç—ã {name} {surname}'
#     keyboard = types.InlineKeyboardMarkup()
#     yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
#     keyboard.add(yes)
#     no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
#     keyboard.add(no)
#     bot.send_message(message.from_user.id, text=quastion,
#                      reply_markup=keyboard)
#
#
# @bot.callback_query_handler(func=lambda call: True)
# def callback_worker(call):
# # """
# # call.data - callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
# # """
#     if call.data == 'yes':
#         bot.send_message(call.message.chat.id,
#                          '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
#     elif call.data == 'no':
#         bot.send_message(call.message.chat.id,
#                          '–¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞...')
#         bot.register_next_step_handler(call.message, get_name())
#
#
# # –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞
# bot.polling(none_stop=True)


import logging  # —Ñ–∏–∫—Å–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
import config
from telegram.ext import Application, MessageHandler, filters
from telegram.ext import CommandHandler
from telegram import ReplyKeyboardMarkup
from telegram import ReplyKeyboardRemove

# –ó–∞–ø—É—Å—Ç–∏–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)

logger = logging.getLogger(__name__)

reply_buttons = [
    ['/address', '/site'],
    ['/help', '/start']
]

TIMER = 5

markup = ReplyKeyboardMarkup(reply_buttons, one_time_keyboard=False)


def remove_job(name, context):
    current_job = context.job_queue.get_jobs_by_name(name)
    if not current_job:
        return False
    for job in current_job:
        job.schedule_removal()
    return True


"""
–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
update - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
context - –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ 
"""


async def echo(update, context):
    await update.message.reply_text(update.message.text)


async def start(update, context):
    """
    –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    """
    user = update.effective_user
    await update.message.reply_html(
        rf'–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø —ç—Ö–æ-–±–æ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-—Ç–æ.',
        reply_markup=markup
    )


async def set_timer(update, context):
    chat_id = update.effective_message.chat_id
    job_removed = remove_job(str(chat_id), context)
    context.job_queue.run_once(task, TIMER,
                               chat_id=chat_id,
                               name=str(chat_id),
                               data=TIMER)
    text = f'–ë—É–¥—É —á–µ—Ä–µ–∑ {TIMER} —Å–µ–∫!'
    if job_removed:
        text += ' –°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.'
    await update.effective_message.reply_text(text)


async def task(context):
    await context.bot.send_message(context.job.chat_id,
                                   text=f'–í–æ—Ç –∏ –ø—Ä–æ—à–ª–∏ {TIMER} —Å–µ–∫.')


async def help_command(update, context):
    await update.message.reply_text('–Ø –ø—Ä–æ—Å—Ç–æ–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫')


async def unset(update, context):
    chat_id = update.message.chat_id
    job_removed = remove_job(str(chat_id), context)
    text = '–¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω' if job_removed else '–¢–∞–π–º–µ—Ä—ã –Ω–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'
    await update.message.reply_text(text)


async def address(update, context):
    await update.message.reply_text('–ê–¥—Ä–µ—Å –ò–ü–ê–ü: –°–ü–±, –ú–æ–∂–∞–π—Å–∫–∞—è, 2')


async def site(update, context):
    await update.message.reply_text('https://google.com')


async def close_keyboard(update, context):
    await update.message.reply_text('Ok', reply_markup=ReplyKeyboardRemove())


def main():
    application = Application.builder().token(config.bot_token).build()
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, echo)
    application.add_handler(text_handler)
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('address', address))
    application.add_handler(CommandHandler('site', site))
    application.add_handler(CommandHandler('close', close_keyboard))
    application.add_handler(CommandHandler('set', set_timer))
    application.add_handler(CommandHandler('unset', unset))
    application.run_polling()


if __name__ == '__main__':
    main()



